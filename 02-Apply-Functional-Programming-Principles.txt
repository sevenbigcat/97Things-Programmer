Functional programming has recently enjoyed renewed interest from the mainstream programming community. 
[函数编程近期重新吸引了主流编程社区的兴趣]

Part of the reason is because emergent properties of the functional paradigm are well positioned to address the challenges posed by our industry's shift toward multi-core. 
[其中部分原因是因为函数范例(functional paradigm)的突变性质(emergent properties)很好的解决了我们行业在向多核转变所面临的挑战。]

However, while that is certainly an important application, it is not the reason this piece admonishes you to know thy functional programming.
[然而，就算那的确是一个重要应用，这也不是告诫你要了解函数编程。]

Mastery of the functional programming paradigm can greatly improve the quality of the code you write in other contexts. If you deeply understand and apply the functional paradigm, your designs will exhibit a much higher degree of referential transparency.
[掌握函数编成范式可以极大地提高你在其他情况下所写的代码的质量。 如果你深刻理解并且应用函数范例，那么你的设计将展现出更高程度的引用透明度(引用透明度)。]

Referential transparency is a very desirable property: It implies that functions consistently yield the same results given the same input, irrespective of where and when they are invoked. That is, function evaluation depends less — ideally, not at all — on the side effects of mutable state.
[引用透明度是一种非常令人向往的特质：它意味着不管函数什么时间或者在哪里被调用，函数根据同样的输入始终都会生成同样的结果。就是说，函数评估依赖的更少了-理想地，但绝不是-在不稳定状态方面的副作用。]

A leading cause of defects in imperative code is attributable to mutable variables. 
[在赶工代码中的缺陷的主要原因在于善变的变量。]

Everyone reading this will have investigated why some value is not as expected in a particular situation. 
[每个读代码的人都将已经调查为什么某些值在某种情况下和期望的值不同。]

Visibility semantics can help to mitigate these insidious defects, or at least to drastically narrow down their location, but their true culprit may in fact be the providence of designs that employ inordinate mutability.
[可见的语义能够帮助降低这些隐秘的缺陷，或者至少大幅缩小他们的位置，但是真正的罪魁祸首可能实际是使用了过多的可变性的设计的宿命。]

And we certainly don't get much help from industry in this regard. 
[而且我们肯定没有在这方面从行业中得到太多帮助。]

Introductions to object orientation tacitly promote such design, because they often show examples composed of graphs of relatively long-lived objects that happily call mutator methods on each other, which can be dangerous. 
[采用面向对象默默提升这样的设计，应为他们经常会展示一些用相对存活时间很长的对象的图形组成的例子，]
However, with astute test-driven design, particularly when being sure to "Mock Roles, not Objects", unnecessary mutability can be designed away.

The net result is a design that typically has better responsibility allocation with more numerous, smaller functions that act on arguments passed into them, rather than referencing mutable member variables. There will be fewer defects, and furthermore they will often be simpler to debug, because it is easier to locate where a rogue value is introduced in these designs than to otherwise deduce the particular context that results in an erroneous assignment. This adds up to a much higher degree of referential transparency, and positively nothing will get these ideas as deeply into your bones as learning a functional programming language, where this model of computation is the norm.

Of course, this approach is not optimal in all situations. For example, in object-oriented systems this style often yields better results with domain model development (i.e., where collaborations serve to break down the complexity of business rules) than with user-interface development.

Master the functional programming paradigm so you are able to judiciously apply the lessons learned to other domains. Your object systems (for one) will resonate with referential transparency goodness and be much closer to their functional counterparts than many would have you believe. In fact, some would even assert that the apex of functional programming and object orientation are merely a reflection of each other, a form of computational yin and yang.
